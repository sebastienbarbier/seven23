{"version":3,"file":"Statistics.worker.d20efe878c809678b485.worker.js","mappings":"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","sources":["webpack://seven23/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://seven23/./src/app/utils/date.js","webpack://seven23/./src/app/workers/Statistics.worker.js","webpack://seven23/./src/app/constants.js","webpack://seven23/./src/app/components/search/utils.js"],"sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","function isLeapYear(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\nconst regex = /[12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/;\n\n/**\n * Convert date object to string with YYY-MM-DD format, MM being between 01 and 12\n */\nfunction dateToString(date) {\n  if (date instanceof Date) {\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2);\n    const day = (\"0\" + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n  } else if (typeof date === \"string\") {\n    if (regex.test(date)) {\n      return date.slice(0, 10);\n    } else {\n      throw new Error(\n        `String '${date}' is not a valide date format (YYYY-MM-DD)`\n      );\n    }\n  }\n  throw new Error(\n    `Type ${typeof date} is not handled by Utils.date.dateToString()`\n  );\n}\n\n/**\n * Convert string with YYY-MM-DD format to date object\n */\nfunction stringToDate(str) {\n  if (typeof str === \"string\") {\n    if (regex.test(str)) {\n      const year = str.slice(0, 4);\n      const month = str.slice(5, 7);\n      const day = str.slice(8, 10);\n      return new Date(year, month - 1, day);\n    } else {\n      throw new Error(\n        `String '${str}' is not a valide date format (YYYY-MM-DD)`\n      );\n    }\n  } else if (str instanceof Date) {\n    return str;\n  }\n  throw new Error(\n    `Type ${typeof str} is not handled by Utils.date.stringToDate()`\n  );\n}\n\nexport { isLeapYear, dateToString, stringToDate, regex };\n","import {\n  STATISTICS_DASHBOARD,\n  STATISTICS_VIEWER,\n  STATISTICS_PER_DATE,\n  STATISTICS_PER_CATEGORY,\n  STATISTICS_SEARCH,\n  STATISTICS_NOMADLIST,\n} from \"../constants\";\n\nimport { stringToDate, dateToString } from \"../utils/date\";\nimport { fuzzyFilter } from \"../components/search/utils\";\n\nonmessage = function (event) {\n  // Action object is the on generated in action object\n  var action = event.data;\n  const { uuid } = action;\n\n  var {\n    transactions,\n    nomadlist,\n    begin,\n    end,\n    category,\n    categoriesToExclude,\n  } = action;\n  var list = [];\n\n  if (!transactions) {\n    transactions = [];\n  }\n\n  // Because of redux persist we need to save date as string.\n  // This convert strings to date object.\n  transactions.forEach((transaction) => {\n    transaction.date = stringToDate(transaction.date);\n  });\n\n  switch (action.type) {\n    case STATISTICS_DASHBOARD: {\n      list = transactions;\n      const stats = generateStatistics(list);\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        currentYear: generateCurrentYear(transactions),\n        trend7: generateTrends(transactions, 7),\n        trend30: generateTrends(transactions, 30),\n        stats: stats,\n        graph: generateGraph(stats),\n      });\n      break;\n    }\n    case STATISTICS_VIEWER: {\n      list = transactions.filter(\n        (transaction) => transaction.date >= begin && transaction.date <= end\n      );\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        currentYear: generateCurrentYear(transactions),\n        stats: generateStatistics(list),\n      });\n      break;\n    }\n    case STATISTICS_PER_DATE: {\n      list = transactions.filter(\n        (transaction) => transaction.date >= begin && transaction.date <= end\n      );\n\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        stats: generateStatistics(list),\n      });\n      break;\n    }\n    case STATISTICS_PER_CATEGORY: {\n      list = transactions.filter(\n        (transaction) => transaction.category === category\n      );\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        stats: generateStatistics(list),\n      });\n      break;\n    }\n    case STATISTICS_SEARCH: {\n      list = transactions.filter((transaction) =>\n        fuzzyFilter(action.text || \"\", transaction.name)\n      );\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        stats: generateStatistics(list),\n      });\n      break;\n    }\n    case STATISTICS_NOMADLIST: {\n      list = transactions.filter(\n        (transaction) => categoriesToExclude.indexOf(transaction.category) == -1\n      );\n      const result = generateNomadlistOverview(nomadlist, list);\n      postMessage({\n        uuid,\n        type: action.type,\n        cities: result.cities,\n        countries: result.countries,\n      });\n      break;\n    }\n    default:\n      return;\n  }\n};\n\nfunction generateCurrentYear(transactions) {\n  var year = new Date().getFullYear();\n  var month = new Date().getMonth();\n\n  var list = transactions.filter(\n    (transaction) => transaction.date.getFullYear() === year\n  );\n  var result = generateStatistics(list);\n\n  var list2 = transactions.filter(\n    (transaction) =>\n      transaction.date.getFullYear() === year &&\n      transaction.date.getMonth() === month\n  );\n  result.currentMonth = generateStatistics(list2);\n  return result;\n}\n\nfunction generateTrends(transactions, numberOfDayToAnalyse = 30) {\n  let categories = {};\n  var now = new Date();\n  var date1 =\n    new Date(now.getFullYear(), now.getMonth(), now.getDate()) -\n    1000 * 60 * 60 * 24 * (numberOfDayToAnalyse + 1);\n  var date2 =\n    new Date(now.getFullYear(), now.getMonth(), now.getDate()) -\n    1000 * 60 * 60 * 24;\n\n  var list = transactions.filter(\n    (transaction) => transaction.date >= date1 && transaction.date <= date2\n  );\n  list.forEach((transaction) => {\n    if (transaction.amount < 0) {\n      if (!transaction.category) {\n        transaction.category = 0;\n      }\n      if (!categories[transaction.category]) {\n        categories[transaction.category] = {\n          earliest: 0,\n          oldiest: 0,\n        };\n      }\n      categories[transaction.category].earliest =\n        categories[transaction.category].earliest + transaction.amount;\n    }\n  });\n\n  // Oldest range\n\n  var date3 =\n    new Date(now.getFullYear(), now.getMonth(), now.getDate()) -\n    1000 * 60 * 60 * 24 * (numberOfDayToAnalyse * 2 + 2);\n  var date4 =\n    new Date(now.getFullYear(), now.getMonth(), now.getDate()) -\n    1000 * 60 * 60 * 24 * (numberOfDayToAnalyse + 2);\n\n  var list2 = transactions.filter(\n    (transaction) => transaction.date >= date3 && transaction.date <= date4\n  );\n  list2.forEach((transaction) => {\n    if (transaction.amount < 0) {\n      if (!transaction.category) {\n        transaction.category = 0;\n      }\n      if (!categories[transaction.category]) {\n        categories[transaction.category] = {\n          earliest: 0,\n          oldiest: 0,\n        };\n      }\n      categories[transaction.category].oldiest =\n        categories[transaction.category].oldiest + transaction.amount;\n    }\n  });\n\n  let trend = [];\n  let diff = 0;\n  let sumEarlier = 0;\n  let sumOldiest = 0;\n  Object.keys(categories).forEach((key) => {\n    trend.push({\n      id: key,\n      diff: categories[key].oldiest - categories[key].earliest,\n      earliest: categories[key].earliest,\n      oldiest: categories[key].oldiest,\n    });\n    diff = diff + (categories[key].oldiest - categories[key].earliest);\n    sumEarlier += categories[key].earliest;\n    sumOldiest += categories[key].oldiest;\n  });\n  trend = trend.sort((a, b) => {\n    return a.diff < b.diff ? 1 : -1;\n  });\n\n  return {\n    diff,\n    firstRange: {\n      dateBegin: date1,\n      dateEnd: date2,\n      sum: sumEarlier,\n    },\n    secondRange: {\n      dateBegin: date3,\n      dateEnd: date4,\n      sum: sumOldiest,\n    },\n    trend,\n  };\n}\n\nfunction generateStatistics(transactions = []) {\n  let expenses = 0,\n    incomes = 0,\n    categories = {},\n    dates = {};\n\n  transactions.forEach((transaction) => {\n    // Calculate categories\n    if (transaction.category && !categories[transaction.category]) {\n      categories[transaction.category] = {\n        expenses: 0,\n        incomes: 0,\n        counter: 0,\n      };\n    }\n\n    // Calculate per dates\n    if (!dates[transaction.date.getFullYear()]) {\n      dates[transaction.date.getFullYear()] = {\n        expenses: 0,\n        incomes: 0,\n        counter: 0,\n        months: {},\n      };\n    }\n    if (\n      !dates[transaction.date.getFullYear()].months[transaction.date.getMonth()]\n    ) {\n      dates[transaction.date.getFullYear()].months[\n        transaction.date.getMonth()\n      ] = {\n        expenses: 0,\n        incomes: 0,\n        counter: 0,\n        days: {},\n      };\n    }\n    if (\n      !dates[transaction.date.getFullYear()].months[transaction.date.getMonth()]\n        .days[transaction.date.getDate()]\n    ) {\n      dates[transaction.date.getFullYear()].months[\n        transaction.date.getMonth()\n      ].days[transaction.date.getDate()] = {\n        expenses: 0,\n        incomes: 0,\n        counter: 0,\n      };\n    }\n\n    const year_stats = dates[transaction.date.getFullYear()];\n    year_stats.counter += 1;\n    if (transaction.amount >= 0) {\n      incomes += transaction.amount;\n      year_stats.incomes += transaction.amount;\n      year_stats.months[transaction.date.getMonth()].incomes +=\n        transaction.amount;\n      year_stats.months[transaction.date.getMonth()].counter += 1;\n      year_stats.months[transaction.date.getMonth()].days[\n        transaction.date.getDate()\n      ].incomes += transaction.amount;\n      year_stats.months[transaction.date.getMonth()].days[\n        transaction.date.getDate()\n      ].counter += 1;\n      if (transaction.category) {\n        categories[transaction.category].incomes += transaction.amount;\n      }\n    } else {\n      expenses += transaction.amount;\n      year_stats.expenses += transaction.amount;\n      year_stats.months[transaction.date.getMonth()].expenses +=\n        transaction.amount;\n      year_stats.months[transaction.date.getMonth()].counter += 1;\n      year_stats.months[transaction.date.getMonth()].days[\n        transaction.date.getDate()\n      ].expenses += transaction.amount;\n      year_stats.months[transaction.date.getMonth()].days[\n        transaction.date.getDate()\n      ].counter += 1;\n      if (transaction.category) {\n        categories[transaction.category].expenses += transaction.amount;\n      }\n    }\n  });\n\n  return {\n    incomes: incomes,\n    expenses: expenses,\n    perDates: dates,\n    perCategories: categories,\n    perCategoriesArray: Object.keys(categories)\n      .map((id) => {\n        return {\n          id: id,\n          incomes: categories[id].incomes,\n          expenses: categories[id].expenses,\n        };\n      })\n      .sort((a, b) => {\n        return (a.incomes + a.expenses) > (b.incomes + b.expenses) ? 1 : -1;\n      }),\n  };\n}\n\nfunction generateGraph(stats) {\n  // Generate Graph data\n  let lineExpenses = {\n    // color: theme.palette.numbers.red,\n    values: [],\n  };\n\n  let lineIncomes = {\n    // color: theme.palette.numbers.blue,\n    values: [],\n  };\n\n  Object.keys(stats.perDates).forEach((year) => {\n    // For each month of year\n    Object.keys(stats.perDates[year].months).forEach((month) => {\n      if (stats.perDates[year].months[month]) {\n        lineExpenses.values.push({\n          date: new Date(year, month),\n          value: +stats.perDates[year].months[month].expenses * -1,\n        });\n        lineIncomes.values.push({\n          date: new Date(year, month),\n          value: stats.perDates[year].months[month].incomes,\n        });\n      } else {\n        lineExpenses.values.push({\n          date: new Date(year, month),\n          value: 0,\n        });\n        lineIncomes.values.push({\n          date: new Date(year, month),\n          value: 0,\n        });\n      }\n    });\n  });\n\n  return [lineExpenses, lineIncomes];\n}\n\nfunction generateNomadlistOverview(nomadlist, transactions) {\n  const result = {\n    cities: {},\n    countries: {},\n  };\n  const now = new Date();\n  nomadlist.data.trips.forEach((trip) => {\n    const begin = stringToDate(trip.date_start);\n    const end = stringToDate(trip.date_end);\n\n    if (end <= now) {\n      trip.transactions = transactions.filter(\n        (transaction) => transaction.date >= begin && transaction.date <= end\n      );\n\n      if (trip.transactions.length) {\n        const key = `${trip.place}-${trip.country_code}`;\n        if (!result.cities[key]) {\n          result.cities[key] = {\n            country: trip.country,\n            country_code: trip.country_code,\n            country_slug: trip.country_slug,\n            place: trip.place,\n            place_slug: trip.place_slug,\n            averageStay: 0,\n            averageExpenses: 0,\n            averagePerDay: 0,\n            averagePerMonth: 0,\n            stay: 0,\n            transactions_length: 0,\n            trips: [],\n          };\n        }\n        if (!result.countries[trip.country_code]) {\n          result.countries[trip.country_code] = {\n            country: trip.country,\n            country_code: trip.country_code,\n            country_slug: trip.country_slug,\n            averageStay: 0,\n            averageExpenses: 0,\n            averagePerDay: 0,\n            averagePerMonth: 0,\n            stay: 0,\n            transactions_length: 0,\n            trips: [],\n          };\n        }\n        trip.stats = generateStatistics(trip.transactions);\n        trip.stay = Math.ceil(Math.abs(begin - end) / (1000 * 60 * 60 * 24));\n        if (trip.stay == 0) {\n          trip.stay = 1;\n        }\n        trip.perDay = trip.stats.expenses / trip.stay;\n        trip.perMonth = (trip.stats.expenses * 365.25) / trip.stay / 12;\n        result.cities[key].stay += trip.stay;\n        result.cities[key].transactions_length += trip.transactions.length;\n        result.cities[key].trips.push(trip);\n        result.cities[key].averageStay += trip.stay;\n        result.cities[key].averageExpenses += trip.stats.expenses;\n        result.cities[key].averagePerDay += trip.perDay;\n        result.cities[key].averagePerMonth += trip.perMonth;\n\n        result.countries[trip.country_code].stay += trip.stay;\n        result.countries[trip.country_code].transactions_length +=\n          trip.transactions.length;\n        result.countries[trip.country_code].trips.push(trip);\n        result.countries[trip.country_code].averageStay += trip.stay;\n        result.countries[trip.country_code].averageExpenses +=\n          trip.stats.expenses;\n        result.countries[trip.country_code].averagePerDay += trip.perDay;\n        result.countries[trip.country_code].averagePerMonth += trip.perMonth;\n      }\n    }\n  });\n\n  Object.values(result.cities).forEach((city) => {\n    city.averageStay = city.averageStay / city.trips.length;\n    city.averageExpenses = city.averageExpenses / city.trips.length;\n    city.averagePerDay = city.averagePerDay / city.trips.length;\n    city.averagePerMonth = city.averagePerMonth / city.trips.length;\n  });\n\n  Object.values(result.countries).forEach((country) => {\n    country.averageStay = country.averageStay / country.trips.length;\n    country.averageExpenses = country.averageExpenses / country.trips.length;\n    country.averagePerDay = country.averagePerDay / country.trips.length;\n    country.averagePerMonth = country.averagePerMonth / country.trips.length;\n  });\n\n  return {\n    cities: Object.values(result.cities),\n    countries: Object.values(result.countries),\n  };\n}\n","export const DB_NAME = \"seven23\";\nexport const DB_VERSION = 15; // Cannot rollback after creation\nexport const API_DEFAULT_URL = \"https://api.seven23.io\";\n\nexport const ATTACHMENT_DELETE_REQUEST = \"ATTACHMENT_DELETE_REQUEST\";\nexport const UPDATE_ENCRYPTION = \"UPDATE_ENCRYPTION\";\nexport const ENCRYPTION_KEY_CHANGED = \"ENCRYPTION_KEY_CHANGED\";\nexport const ENCRYPTION_ERROR = \"ENCRYPTION_ERROR\";\nexport const FLUSH = \"FLUSH\";\nexport const RESET = \"RESET\";\n\nexport const CATEGORIES_CREATE_REQUEST = \"CATEGORIES_CREATE_REQUEST\";\nexport const CATEGORIES_READ_REQUEST = \"CATEGORIES_READ_REQUEST\";\nexport const CATEGORIES_UPDATE_REQUEST = \"CATEGORIES_UPDATE_REQUEST\";\nexport const CATEGORIES_DELETE_REQUEST = \"CATEGORIES_DELETE_REQUEST\";\nexport const CATEGORIES_RESET = \"CATEGORIES_RESET\";\nexport const CATEGORIES_EXPORT = \"CATEGORIES_EXPORT\";\n\nexport const CHANGES_CREATE_REQUEST = \"CHANGES_CREATE_REQUEST\";\nexport const CHANGES_READ_REQUEST = \"CHANGES_READ_REQUEST\";\nexport const CHANGES_UPDATE_REQUEST = \"CHANGES_UPDATE_REQUEST\";\nexport const CHANGES_DELETE_REQUEST = \"CHANGES_DELETE_REQUEST\";\nexport const CHANGES_EXPORT = \"CHANGES_EXPORT\";\n\nexport const TRANSACTIONS_CREATE_REQUEST = \"TRANSACTIONS_CREATE_REQUEST\";\nexport const TRANSACTIONS_READ_REQUEST = \"TRANSACTIONS_READ_REQUEST\";\nexport const TRANSACTIONS_UPDATE_REQUEST = \"TRANSACTIONS_UPDATE_REQUEST\";\nexport const TRANSACTIONS_DELETE_REQUEST = \"TRANSACTIONS_DELETE_REQUEST\";\nexport const TRANSACTIONS_EXPORT = \"TRANSACTIONS_EXPORT\";\nexport const TRANSACTIONS_SYNC_REQUEST = \"TRANSACTIONS_SYNC_REQUEST\";\nexport const TRANSACTIONS_SWITCH_ID = \"TRANSACTIONS_SWITCH_ID\";\n\nexport const ACCOUNTS_CREATE_REQUEST = \"ACCOUNTS_CREATE_REQUEST\";\nexport const ACCOUNTS_SYNC_REQUEST = \"ACCOUNTS_SYNC_REQUEST\";\nexport const ACCOUNTS_UPDATE_REQUEST = \"ACCOUNTS_UPDATE_REQUEST\";\nexport const ACCOUNTS_DELETE_REQUEST = \"ACCOUNTS_DELETE_REQUEST\";\nexport const ACCOUNTS_CURRENCY_REQUEST = \"ACCOUNTS_CURRENCY_REQUEST\";\nexport const ACCOUNTS_SWITCH_REQUEST = \"ACCOUNTS_SWITCH_REQUEST\";\n\nexport const ACCOUNTS_IMPORT = \"ACCOUNTS_IMPORT\";\n\nexport const CURRENCIES_SYNC_REQUEST = \"CURRENCIES_SYNC_REQUEST\";\nexport const CURRENCIES_CREATE_REQUEST = \"CURRENCIES_CREATE_REQUEST\";\nexport const CURRENCIES_READ_REQUEST = \"CURRENCIES_READ_REQUEST\";\nexport const CURRENCIES_UPDATE_REQUEST = \"CURRENCIES_UPDATE_REQUEST\";\nexport const CURRENCIES_DELETE_REQUEST = \"CURRENCIES_DELETE_REQUEST\";\nexport const CURRENCIES_RESET = \"CURRENCIES_RESET\";\n\nexport const USER_LOGIN = \"LOGIN\";\nexport const USER_LOGOUT = \"LOGOUT\";\nexport const USER_FETCH_PROFILE = \"USER_FETCH_PROFILE\";\nexport const USER_CREATE_REQUEST = \"USER_CREATE_REQUEST\";\nexport const USER_READ_REQUEST = \"USER_READ_REQUEST\";\nexport const USER_UPDATE_REQUEST = \"USER_UPDATE_REQUEST\";\nexport const USER_CHANGE_PASSWORD = \"USER_CHANGE_PASSWORD\";\nexport const USER_CHANGE_EMAIL = \"USER_CHANGE_EMAIL\";\n\nexport const USER_FETCH_TOKEN = \"USER_FETCH_TOKEN\";\nexport const USER_REVOKE_TOKEN = \"USER_REVOKE_TOKEN\";\nexport const USER_DELETE_REQUEST = \"USER_DELETE_REQUEST\";\nexport const USER_CHANGE_THEME = \"USER_CHANGE_THEME\";\nexport const USER_UPDATE_NETWORK = \"USER_UPDATE_NETWORK\";\n\nexport const SERVER_CONNECTING = \"SERVER_CONNECTING\";\nexport const SERVER_CONNECT = \"SERVER_CONNECT\";\nexport const SERVER_CONNECT_FAIL = \"SERVER_CONNECT_FAIL\";\nexport const SERVER_SYNC = \"SERVER_SYNC\";\nexport const SERVER_SYNCED = \"SERVER_SYNCED\";\nexport const SERVER_LOAD = \"SERVER_LOAD\";\nexport const SERVER_LOADED = \"SERVER_LOADED\";\nexport const SERVER_LOGGED = \"SERVER_LOGGED\";\nexport const SERVER_LAST_EDITED = \"SERVER_LAST_EDITED\";\nexport const SERVER_INIT = \"SERVER_INIT\";\nexport const SERVER_UNDER_MAINTENANCE = \"SERVER_UNDER_MAINTENANCE\";\nexport const SERVER_ERROR = \"SERVER_ERROR\";\n\nexport const STATISTICS_DASHBOARD = \"STATISTICS_DASHBOARD\";\nexport const STATISTICS_VIEWER = \"STATISTICS_VIEWER\";\nexport const STATISTICS_PER_DATE = \"STATISTICS_PER_DATE\";\nexport const STATISTICS_PER_CATEGORY = \"STATISTICS_PER_CATEGORY\";\nexport const STATISTICS_SEARCH = \"STATISTICS_SEARCH\";\nexport const STATISTICS_NOMADLIST = \"STATISTICS_NOMADLIST\";\n\nexport const REPORT_SET_DATES = \"REPORT_SET_DATES\";\nexport const NAVIGATE = \"NAVIGATE\";\nexport const SNACKBAR = \"SNACKBAR\";\nexport const SNACKBAR_POP = \"SNACKBAR_POP\";\nexport const APP_LAST_SEEN = \"APP_LAST_SEEN\";\nexport const VISIBILITY = \"VISIBILITY\";\nexport const CACHE_DID_UPDATE = \"CACHE_DID_UPDATE\";\n\nexport const CHANGE_EVENT = \"CHANGE_EVENT\";\nexport const ADD_EVENT = \"ADD_EVENT\";\nexport const DELETE_EVENT = \"DELETE_EVENT\";\nexport const UPDATE_EVENT = \"UPDATE_EVENT\";","function fuzzyFilter(searchText, key) {\n  var compareString = key.toLowerCase();\n  searchText = searchText.toLowerCase();\n\n  var searchTextIndex = 0;\n  for (var index = 0; index < key.length; index++) {\n    if (compareString[index] === searchText[searchTextIndex]) {\n      searchTextIndex += 1;\n    }\n  }\n\n  return searchTextIndex === searchText.length;\n}\n\nexport { fuzzyFilter };\n"],"names":["obj","Symbol","iterator","constructor","prototype","regex","stringToDate","str","test","year","slice","month","day","Date","Error","generateCurrentYear","transactions","getFullYear","getMonth","result","generateStatistics","filter","transaction","date","list2","currentMonth","generateTrends","numberOfDayToAnalyse","categories","now","date1","getDate","date2","forEach","amount","category","earliest","oldiest","date3","date4","trend","diff","sumEarlier","sumOldiest","Object","keys","key","push","id","sort","a","b","firstRange","dateBegin","dateEnd","sum","secondRange","expenses","incomes","dates","counter","months","days","year_stats","perDates","perCategories","perCategoriesArray","map","generateGraph","stats","lineExpenses","values","lineIncomes","value","onmessage","event","action","data","uuid","nomadlist","begin","end","categoriesToExclude","list","type","postMessage","currentYear","trend7","trend30","graph","searchText","compareString","toLowerCase","searchTextIndex","index","length","fuzzyFilter","text","name","cities","countries","trips","trip","date_start","date_end","place","country_code","country","country_slug","place_slug","averageStay","averageExpenses","averagePerDay","averagePerMonth","stay","transactions_length","Math","ceil","abs","perDay","perMonth","city","generateNomadlistOverview","indexOf"],"sourceRoot":""}