{"version":3,"file":"Statistics.worker.20b2acd0bfbe6e4e0daa.worker.js","mappings":"+hBAAe,SAAS,EAAQA,GAG9B,OAAO,EAAU,mBAAqBC,QAAU,iBAAmBA,OAAOC,SAAW,SAAUF,GAC7F,cAAcA,CAChB,EAAI,SAAUA,GACZ,OAAOA,GAAK,mBAAqBC,QAAUD,EAAEG,cAAgBF,QAAUD,IAAMC,OAAOG,UAAY,gBAAkBJ,CACpH,EAAG,EAAQA,EACb,CCHA,IAAMK,EAAQ,kDAgCd,SAASC,EAAaC,GACpB,GAAmB,iBAARA,EAAkB,CAC3B,GAAIF,EAAMG,KAAKD,GAAM,CACnB,IAAME,EAAOF,EAAIG,MAAM,EAAG,GACpBC,EAAQJ,EAAIG,MAAM,EAAG,GACrBE,EAAML,EAAIG,MAAM,EAAG,IACzB,OAAO,IAAIG,KAAKJ,EAAME,EAAQ,EAAGC,EACnC,CACE,MAAM,IAAIE,MAAM,WAADC,OACFR,EAAG,8CAGpB,CAAO,GAAIA,aAAeM,KACxB,OAAON,EAET,MAAM,IAAIO,MAAM,QAADC,OAAAC,EACET,GAAG,gDAEtB,CCyEA,SAASU,EAAoBC,EAAcC,GACzC,IAAIV,GAAO,IAAII,MAAOO,cAClBT,GAAQ,IAAIE,MAAOQ,WAKnBC,EAASC,EAHFL,EAAaM,QACrBC,GAAgBA,EAAYC,KAAKN,gBAAkBX,IAEhBU,GAElCQ,EAAQT,EAAaM,QACtBC,GACCA,EAAYC,KAAKN,gBAAkBX,GACnCgB,EAAYC,KAAKL,aAAeV,IAGpC,OADAW,EAAOM,aAAeL,EAAmBI,EAAOR,GACzCG,CACT,CAEA,SAASO,EAAeX,EAAcY,EAAuB,IAC3D,IAAIC,EAAa,CAAC,EAClB,IAAIC,EAAM,IAAInB,KACVoB,EACF,IAAIpB,KAAKmB,EAAIZ,cAAeY,EAAIX,WAAYW,EAAIE,WAChD,OAAuBJ,EAAuB,GAC5CK,EACF,IAAItB,KAAKmB,EAAIZ,cAAeY,EAAIX,WAAYW,EAAIE,WAChD,MAEShB,EAAaM,QACrBC,GACCA,EAAYC,MAAQO,GACpBR,EAAYC,MAAQS,IACnBV,EAAYW,YAEZC,SAASZ,IACRA,EAAYa,OAAS,IAClBb,EAAYc,WACfd,EAAYc,SAAW,GAEpBR,EAAWN,EAAYc,YAC1BR,EAAWN,EAAYc,UAAY,CACjCC,SAAU,EACVC,QAAS,IAGbV,EAAWN,EAAYc,UAAUC,SAC/BT,EAAWN,EAAYc,UAAUC,SAAWf,EAAYa,OAC5D,IAKF,IAAII,EACF,IAAI7B,KAAKmB,EAAIZ,cAAeY,EAAIX,WAAYW,EAAIE,WAChD,OAA8C,EAAvBJ,EAA2B,GAChDa,EACF,IAAI9B,KAAKmB,EAAIZ,cAAeY,EAAIX,WAAYW,EAAIE,WAChD,OAAuBJ,EAAuB,GAEpCZ,EAAaM,QACtBC,GACCA,EAAYC,MAAQgB,GACpBjB,EAAYC,MAAQiB,IACnBlB,EAAYW,YAEXC,SAASZ,IACTA,EAAYa,OAAS,IAClBb,EAAYc,WACfd,EAAYc,SAAW,GAEpBR,EAAWN,EAAYc,YAC1BR,EAAWN,EAAYc,UAAY,CACjCC,SAAU,EACVC,QAAS,IAGbV,EAAWN,EAAYc,UAAUE,QAC/BV,EAAWN,EAAYc,UAAUE,QAAUhB,EAAYa,OAC3D,IAGF,IAAIM,EAAQ,GACRC,EAAO,EACPC,EAAa,EACbC,EAAa,EAgBjB,OAfAC,OAAOC,KAAKlB,GAAYM,SAASa,IAC/BN,EAAMO,KAAK,CACTC,GAAIF,EACJL,KAAMd,EAAWmB,GAAKT,QAAUV,EAAWmB,GAAKV,SAChDA,SAAUT,EAAWmB,GAAKV,SAC1BC,QAASV,EAAWmB,GAAKT,UAE3BI,GAAed,EAAWmB,GAAKT,QAAUV,EAAWmB,GAAKV,SACzDM,GAAcf,EAAWmB,GAAKV,SAC9BO,GAAchB,EAAWmB,GAAKT,OAAO,IAEvCG,EAAQA,EAAMS,MAAK,CAACC,EAAGC,IACdD,EAAET,KAAOU,EAAEV,KAAO,GAAK,IAGzB,CACLA,OACAW,WAAY,CACVC,UAAWxB,EACXyB,QAASvB,EACTwB,IAAKb,GAEPc,YAAa,CACXH,UAAWf,EACXgB,QAASf,EACTgB,IAAKZ,GAEPH,QAEJ,CAEA,SAASrB,EAAmBL,EAAe,GAAIC,EAAS,CAAC,GACvD,IAAI0C,EAAW,EACbC,EAAU,EACV/B,EAAa,CAAC,EACdgC,EAAQ,CAAC,EACTC,GAAmB,EACnBC,EAAY,KACZC,EAAU,KAEZhD,EAAamB,SAASZ,IACM,MAAtBA,EAAYa,QAAwC6B,MAAtB1C,EAAYa,SAC5C0B,GAAmB,GAGhBC,IACHA,EAAYxC,EAAYC,KACxBwC,EAAUzC,EAAYC,MAIpBD,EAAYc,WAAaR,EAAWN,EAAYc,YAClDR,EAAWN,EAAYc,UAAY,CACjCsB,SAAU,EACVC,QAAS,EACTM,QAAS,IAGe,MAAxB3C,EAAYc,UAAqBR,EAAiB,OACpDA,EAAiB,KAAI,CACnB8B,SAAU,EACVC,QAAS,EACTM,QAAS,IAKT3C,EAAYC,KAAOuC,EACrBA,EAAYxC,EAAYC,KACfD,EAAYC,KAAOwC,IAC5BA,EAAUzC,EAAYC,MAInBqC,EAAMtC,EAAYC,KAAKN,iBAC1B2C,EAAMtC,EAAYC,KAAKN,eAAiB,CACtCyC,SAAU,EACVC,QAAS,EACTM,QAAS,EACTC,OAAQ,CAAC,IAIVN,EAAMtC,EAAYC,KAAKN,eAAeiD,OAAO5C,EAAYC,KAAKL,cAE/D0C,EAAMtC,EAAYC,KAAKN,eAAeiD,OACpC5C,EAAYC,KAAKL,YACf,CACFwC,SAAU,EACVC,QAAS,EACTM,QAAS,EACTE,KAAM,CAAC,IAIRP,EAAMtC,EAAYC,KAAKN,eAAeiD,OAAO5C,EAAYC,KAAKL,YAC5DiD,KAAK7C,EAAYC,KAAKQ,aAEzB6B,EAAMtC,EAAYC,KAAKN,eAAeiD,OACpC5C,EAAYC,KAAKL,YACjBiD,KAAK7C,EAAYC,KAAKQ,WAAa,CACnC2B,SAAU,EACVC,QAAS,EACTM,QAAS,IAIb,MAAMG,EAAaR,EAAMtC,EAAYC,KAAKN,eAC1CmD,EAAWH,SAAW,EACjB3C,EAAYW,YACXX,EAAYa,QAAU,GACxBwB,GAAWrC,EAAYa,OACvBiC,EAAWT,SAAWrC,EAAYa,OAClCiC,EAAWF,OAAO5C,EAAYC,KAAKL,YAAYyC,SAC7CrC,EAAYa,OACdiC,EAAWF,OAAO5C,EAAYC,KAAKL,YAAY+C,SAAW,EAC1DG,EAAWF,OAAO5C,EAAYC,KAAKL,YAAYiD,KAC7C7C,EAAYC,KAAKQ,WACjB4B,SAAWrC,EAAYa,OACzBiC,EAAWF,OAAO5C,EAAYC,KAAKL,YAAYiD,KAC7C7C,EAAYC,KAAKQ,WACjBkC,SAAW,EACT3C,EAAYc,SACdR,EAAWN,EAAYc,UAAUuB,SAAWrC,EAAYa,OAExDP,EAAiB,KAAE+B,SAAWrC,EAAYa,SAG5CuB,GAAYpC,EAAYa,OACxBiC,EAAWV,UAAYpC,EAAYa,OACnCiC,EAAWF,OAAO5C,EAAYC,KAAKL,YAAYwC,UAC7CpC,EAAYa,OACdiC,EAAWF,OAAO5C,EAAYC,KAAKL,YAAY+C,SAAW,EAC1DG,EAAWF,OAAO5C,EAAYC,KAAKL,YAAYiD,KAC7C7C,EAAYC,KAAKQ,WACjB2B,UAAYpC,EAAYa,OAC1BiC,EAAWF,OAAO5C,EAAYC,KAAKL,YAAYiD,KAC7C7C,EAAYC,KAAKQ,WACjBkC,SAAW,EACT3C,EAAYc,SACdR,EAAWN,EAAYc,UAAUsB,UAAYpC,EAAYa,OAEzDP,EAAiB,KAAE8B,UAAYpC,EAAYa,QAGjD,IAOF,IAAIkC,EAAW,GAEf,GAAKrD,EAAOsD,OAAStD,EAAOuD,KAAST,GAAaC,EAAU,CAC1D,IAAIS,EAAIxD,EAAOsD,OAASR,EACpBS,EAAMvD,EAAOuD,KAAOR,EAExB,KAAOS,EAAEC,WAAaF,EAAIE,WAAW,CACnC,MAAMnE,EAAOkE,EAAEE,iBACblE,EAAQgE,EAAEG,cACVpD,EAAOiD,EAAEI,aACPhB,EAAMtD,IAAO4D,OAAO1D,IAAQ2D,KAAK5C,GACnC8C,EAASrB,KAAK,CACZzB,KAAM,IAAIb,KAAKA,KAAKmE,IAAIvE,EAAME,EAAOe,IACrCY,OAAQyB,EAAMtD,GAAM4D,OAAO1D,GAAO2D,KAAK5C,GAAMmC,WAG/CW,EAASrB,KAAK,CACZzB,KAAM,IAAIb,KAAKA,KAAKmE,IAAIvE,EAAME,EAAOe,IACrCY,OAAQ,IAIZqC,EAAI,IAAI9D,KAAK8D,EAAEC,UAAY,MAC7B,CACF,CAGA,MAAMK,EAAqBjC,OAAOC,KAAKlB,GACpCmD,KAAK9B,IACJ,MAAMb,EAAWR,EAAWqB,GAC5B,MAAO,CACLA,GAAIA,EACJU,QAASvB,EAASuB,QAClBD,SAAUtB,EAASsB,SACnBF,IAAKpB,EAASuB,QAAUvB,EAASsB,SAClC,IAEFR,MAAK,CAACC,EAAGC,IACDD,EAAEQ,QAAUR,EAAEO,SAAWN,EAAEO,QAAUP,EAAEM,SAAW,GAAK,IAGlE,GAAIoB,GAAoBE,OAAQ,CAC9B,MAAMC,EAAcH,EAAmB,GAAGtB,IACpC0B,EAAcJ,EAAmBA,EAAmBE,OAAS,GAAGxB,IAEtEsB,GAAoB5C,SAASE,IACvBA,EAASoB,IAAM,GACjBpB,EAAS+C,WAAc/C,EAASoB,IAAMyB,EAAe,IACrD7C,EAASgD,gBAAmBhD,EAASoB,IAAME,EAAY,KAC9CtB,EAASoB,IAAM,GACxBpB,EAAS+C,WAAc/C,EAASoB,IAAM0B,EAAe,IACrD9C,EAASgD,gBAAmBhD,EAASoB,IAAMG,EAAW,MAEtDvB,EAAS+C,WAAa,EACtB/C,EAASgD,gBAAkB,EAC7B,GAEJ,CAEA,MAAO,CACLtB,UAAWA,EACXC,QAASA,EACTJ,QAASA,EACTD,SAAUA,EACVG,iBAAkBA,EAClBQ,SAAUA,EACVgB,SAAUzB,EACV0B,cAAe1D,EACfkD,mBAAoBA,EAExB,CAEA,SAASS,EAAcC,GAErB,IAAIC,EAAe,CAEjBC,MAAO,WACPC,OAAQ,IAGNC,EAAc,CAEhBF,MAAO,UACPC,OAAQ,IA4BV,OAzBA9C,OAAOC,KAAK0C,EAAMH,UAAUnD,SAAS5B,IAEnCuC,OAAOC,KAAK0C,EAAMH,SAAS/E,GAAM4D,QAAQhC,SAAS1B,IAC5CgF,EAAMH,SAAS/E,GAAM4D,OAAO1D,IAC9BiF,EAAaE,OAAO3C,KAAK,CACvBzB,KAAM,IAAIb,KAAKJ,EAAME,GACrBqF,OAAuD,GAA/CL,EAAMH,SAAS/E,GAAM4D,OAAO1D,GAAOkD,WAE7CkC,EAAYD,OAAO3C,KAAK,CACtBzB,KAAM,IAAIb,KAAKJ,EAAME,GACrBqF,MAAOL,EAAMH,SAAS/E,GAAM4D,OAAO1D,GAAOmD,YAG5C8B,EAAaE,OAAO3C,KAAK,CACvBzB,KAAM,IAAIb,KAAKJ,EAAME,GACrBqF,MAAO,IAETD,EAAYD,OAAO3C,KAAK,CACtBzB,KAAM,IAAIb,KAAKJ,EAAME,GACrBqF,MAAO,IAEX,GACA,IAGG,CAACJ,EAAcG,EACxB,CAjdAE,UAAY,SAAUC,GAEpB,IAAI/E,EAAS+E,EAAMC,KACnB,MAAM,KAAEC,GAASjF,EAEjB,IAAI,aAAED,EAAY,UAAEmF,EAAS,MAAE5B,EAAK,IAAEC,EAAG,SAAEnC,EAAQ,oBAAE+D,GACnDnF,EACEoF,EAAO,GAYX,OAVKrF,IACHA,EAAe,IAKjBA,EAAamB,SAASZ,IACpBA,EAAYC,KAAOpB,EAAamB,EAAYC,KAAK,IAG3CP,EAAOqF,MACb,ICiDgC,uBDjDL,CAEzB,MAAMb,EAAQpE,EADdgF,EAAOrF,EACgCC,GACvCsF,YAAY,CACVL,OACAI,KAAMrF,EAAOqF,KACbtF,aAAcqF,EACdG,YAAazF,EAAoBC,EAAcC,GAC/CwF,OAAQ9E,EAAeX,EAAc,GACrC0F,QAAS/E,EAAeX,EAAc,IACtCyE,MAAOA,EACPkB,MAAOnB,EAAcC,GACrBmB,SAAUP,EAAK/E,QAAQuF,GAAMA,EAAE3E,cAEjC,KACF,CACA,ICkC6B,oBDjC3BmE,EAAOrF,EAAaM,QACjBC,GAAgBA,EAAYC,MAAQ+C,GAAShD,EAAYC,MAAQgD,IAEpE+B,YAAY,CACVL,OACAI,KAAMrF,EAAOqF,KACbtF,aAAcqF,EACdG,YAAazF,EAAoBC,EAAcC,GAC/CwE,MAAOpE,EAAmBgF,EAAMpF,GAChC2F,SAAUP,EAAK/E,QAAQuF,GAAMA,EAAE3E,cAEjC,MAEF,ICqB+B,sBDpB7BmE,EAAOrF,EAAaM,QACjBC,GAAgBA,EAAYC,MAAQ+C,GAAShD,EAAYC,MAAQgD,IAGpE+B,YAAY,CACVL,OACAI,KAAMrF,EAAOqF,KACbtF,aAAcqF,EACdZ,MAAOpE,EAAmBgF,EAAMpF,GAChC2F,SAAUP,EAAK/E,QAAQuF,GAAMA,EAAE3E,cAEjC,MAEF,ICQmC,0BDRL,CAQ5B,MAAMuD,EAAQpE,EAPdgF,EAAOrF,EAAaM,QAAQC,GACV,QAAZc,GAA8C,MAAxBd,EAAYc,UAG/Bd,EAAYc,WAAaA,IAGKpB,GACvCsF,YAAY,CACVL,OACAI,KAAMrF,EAAOqF,KACbtF,aAAcqF,EACdM,MAAOnB,EAAcC,GACrBA,MAAOpE,EAAmBgF,EAAMpF,GAChC2F,SAAUP,EAAK/E,QAAQuF,GAAMA,EAAE3E,cAEjC,KACF,CACA,ICV6B,oBDW3BmE,EAAOrF,EAAaM,QAAQC,GEhGlC,SAAqBuF,EAAY9D,GAC/B,IAAI+D,EAAgB/D,EAAIgE,cACxBF,EAAaA,EAAWE,cAGxB,IADA,IAAIC,EAAkB,EACbC,EAAQ,EAAGA,EAAQlE,EAAIiC,OAAQiC,IAClCH,EAAcG,KAAWJ,EAAWG,KACtCA,GAAmB,GAIvB,OAAOA,IAAoBH,EAAW7B,MACxC,CFqFQkC,CAAYlG,EAAOmG,MAAQ,GAAI7F,EAAY8F,QAE7Cd,YAAY,CACVL,OACAI,KAAMrF,EAAOqF,KACbtF,aAAcqF,EACdZ,MAAOpE,EAAmBgF,EAAMpF,KAElC,MAEF,ICrBgC,uBDqBL,CAOzB,MAAMG,EA6WZ,SAAmC+E,EAAWnF,GAC5C,MAAMI,EAAS,CACbkG,OAAQ,CAAC,EACTC,UAAW,CAAC,GAERzF,EAAM,IAAInB,KAoFhB,OAnFAwF,EAAUF,KAAKuB,MAAMrF,SAASsF,IAC5B,MAAMlD,EAAQnE,EAAaqH,EAAKC,YAC1BlD,EAAMpE,EAAaqH,EAAKE,UAE9B,GAAInD,GAAO1C,IACT2F,EAAKzG,aAAeA,EAAaM,QAC9BC,GAAgBA,EAAYC,MAAQ+C,GAAShD,EAAYC,MAAQgD,IAGhEiD,EAAKzG,aAAaiE,QAAQ,CAC5B,MAAMjC,EAAM,GAAGyE,EAAKG,SAASH,EAAKI,eAC7BzG,EAAOkG,OAAOtE,KACjB5B,EAAOkG,OAAOtE,GAAO,CACnB8E,QAASL,EAAKK,QACdD,aAAcJ,EAAKI,aACnBE,aAAcN,EAAKM,aACnBH,MAAOH,EAAKG,MACZI,WAAYP,EAAKO,WACjBC,YAAa,EACbC,gBAAiB,EACjBC,cAAe,EACfC,gBAAiB,EACjBC,KAAM,EACNC,oBAAqB,EACrBd,MAAO,KAGNpG,EAAOmG,UAAUE,EAAKI,gBACzBzG,EAAOmG,UAAUE,EAAKI,cAAgB,CACpCC,QAASL,EAAKK,QACdD,aAAcJ,EAAKI,aACnBE,aAAcN,EAAKM,aACnBE,YAAa,EACbC,gBAAiB,EACjBC,cAAe,EACfC,gBAAiB,EACjBC,KAAM,EACNC,oBAAqB,EACrBd,MAAO,KAGXC,EAAKhC,MAAQpE,EAAmBoG,EAAKzG,cACrCyG,EAAKY,KAAOE,KAAKC,KAAKD,KAAKE,IAAIlE,EAAQC,GAAO,OAC7B,GAAbiD,EAAKY,OACPZ,EAAKY,KAAO,GAEdZ,EAAKiB,OAASjB,EAAKhC,MAAM9B,SAAW8D,EAAKY,KACzCZ,EAAKkB,SAAkC,OAAtBlB,EAAKhC,MAAM9B,SAAqB8D,EAAKY,KAAO,GAC7DjH,EAAOkG,OAAOtE,GAAKqF,MAAQZ,EAAKY,KAChCjH,EAAOkG,OAAOtE,GAAKsF,qBAAuBb,EAAKzG,aAAaiE,OAC5D7D,EAAOkG,OAAOtE,GAAKwE,MAAMvE,KAAKwE,GAC9BrG,EAAOkG,OAAOtE,GAAKiF,aAAeR,EAAKY,KACvCjH,EAAOkG,OAAOtE,GAAKkF,iBAAmBT,EAAKhC,MAAM9B,SACjDvC,EAAOkG,OAAOtE,GAAKmF,eAAiBV,EAAKiB,OACzCtH,EAAOkG,OAAOtE,GAAKoF,iBAAmBX,EAAKkB,SAE3CvH,EAAOmG,UAAUE,EAAKI,cAAcQ,MAAQZ,EAAKY,KACjDjH,EAAOmG,UAAUE,EAAKI,cAAcS,qBAClCb,EAAKzG,aAAaiE,OACpB7D,EAAOmG,UAAUE,EAAKI,cAAcL,MAAMvE,KAAKwE,GAC/CrG,EAAOmG,UAAUE,EAAKI,cAAcI,aAAeR,EAAKY,KACxDjH,EAAOmG,UAAUE,EAAKI,cAAcK,iBAClCT,EAAKhC,MAAM9B,SACbvC,EAAOmG,UAAUE,EAAKI,cAAcM,eAAiBV,EAAKiB,OAC1DtH,EAAOmG,UAAUE,EAAKI,cAAcO,iBAAmBX,EAAKkB,QAC9D,CACF,IAGF7F,OAAO8C,OAAOxE,EAAOkG,QAAQnF,SAASyG,IACpCA,EAAKX,YAAcW,EAAKX,YAAcW,EAAKpB,MAAMvC,OACjD2D,EAAKV,gBAAkBU,EAAKV,gBAAkBU,EAAKpB,MAAMvC,OACzD2D,EAAKT,cAAgBS,EAAKT,cAAgBS,EAAKpB,MAAMvC,OACrD2D,EAAKR,gBAAkBQ,EAAKR,gBAAkBQ,EAAKpB,MAAMvC,MAAM,IAGjEnC,OAAO8C,OAAOxE,EAAOmG,WAAWpF,SAAS2F,IACvCA,EAAQG,YAAcH,EAAQG,YAAcH,EAAQN,MAAMvC,OAC1D6C,EAAQI,gBAAkBJ,EAAQI,gBAAkBJ,EAAQN,MAAMvC,OAClE6C,EAAQK,cAAgBL,EAAQK,cAAgBL,EAAQN,MAAMvC,OAC9D6C,EAAQM,gBAAkBN,EAAQM,gBAAkBN,EAAQN,MAAMvC,MAAM,IAGnE,CACLqC,OAAQxE,OAAO8C,OAAOxE,EAAOkG,QAC7BC,UAAWzE,OAAO8C,OAAOxE,EAAOmG,WAEpC,CA1cqBsB,CAA0B1C,EANzCE,EAAOrF,EACJM,QACEC,IACuD,GAAtD6E,EAAoB0C,QAAQvH,EAAYc,YAE3Cf,QAAQC,IAAiBA,EAAYW,aAExCqE,YAAY,CACVL,OACAI,KAAMrF,EAAOqF,KACbgB,OAAQlG,EAAOkG,OACfC,UAAWnG,EAAOmG,YAEpB,KACF,CACA,QACE,OAEN,C","sources":["webpack://seven23/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://seven23/./src/app/utils/date.js","webpack://seven23/./src/app/workers/Statistics.worker.js","webpack://seven23/./src/app/constants.js","webpack://seven23/./src/app/components/search/utils.js"],"sourcesContent":["export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","function isLeapYear(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\n// test YYYY-MM-DD syntax\nconst regex = /[12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/;\n\nfunction dateIsValid(date) {\n  return regex.test(date);\n}\n\n/**\n * Convert date object to string with YYY-MM-DD format, MM being between 01 and 12\n */\nfunction dateToString(date) {\n  if (date instanceof Date) {\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2);\n    const day = (\"0\" + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n  } else if (typeof date === \"string\") {\n    if (regex.test(date)) {\n      return date.slice(0, 10);\n    } else {\n      throw new Error(\n        `String '${date}' is not a valide date format (YYYY-MM-DD)`\n      );\n    }\n  }\n  throw new Error(\n    `Type ${typeof date} is not handled by Utils.date.dateToString()`\n  );\n}\n\n/**\n * Convert string with YYY-MM-DD format to date object\n */\nfunction stringToDate(str) {\n  if (typeof str === \"string\") {\n    if (regex.test(str)) {\n      const year = str.slice(0, 4);\n      const month = str.slice(5, 7);\n      const day = str.slice(8, 10);\n      return new Date(year, month - 1, day);\n    } else {\n      throw new Error(\n        `String '${str}' is not a valide date format (YYYY-MM-DD)`\n      );\n    }\n  } else if (str instanceof Date) {\n    return str;\n  }\n  throw new Error(\n    `Type ${typeof str} is not handled by Utils.date.stringToDate()`\n  );\n}\n\nexport { dateIsValid, dateToString, isLeapYear, regex, stringToDate };\n","import {\n  STATISTICS_DASHBOARD,\n  STATISTICS_NOMADLIST,\n  STATISTICS_PER_CATEGORY,\n  STATISTICS_PER_DATE,\n  STATISTICS_SEARCH,\n  STATISTICS_VIEWER,\n} from \"../constants\";\n\nimport { fuzzyFilter } from \"../components/search/utils\";\nimport { stringToDate } from \"../utils/date\";\n\nonmessage = function (event) {\n  // Action object is the on generated in action object\n  var action = event.data;\n  const { uuid } = action;\n\n  var { transactions, nomadlist, begin, end, category, categoriesToExclude } =\n    action;\n  var list = [];\n\n  if (!transactions) {\n    transactions = [];\n  }\n\n  // Because of redux persist we need to save date as string.\n  // This convert strings to date object.\n  transactions.forEach((transaction) => {\n    transaction.date = stringToDate(transaction.date);\n  });\n\n  switch (action.type) {\n    case STATISTICS_DASHBOARD: {\n      list = transactions;\n      const stats = generateStatistics(list, action);\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        currentYear: generateCurrentYear(transactions, action),\n        trend7: generateTrends(transactions, 7),\n        trend30: generateTrends(transactions, 30),\n        stats: stats,\n        graph: generateGraph(stats),\n        pendings: list.filter((t) => t.isPending),\n      });\n      break;\n    }\n    case STATISTICS_VIEWER: {\n      list = transactions.filter(\n        (transaction) => transaction.date >= begin && transaction.date <= end\n      );\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        currentYear: generateCurrentYear(transactions, action),\n        stats: generateStatistics(list, action),\n        pendings: list.filter((t) => t.isPending),\n      });\n      break;\n    }\n    case STATISTICS_PER_DATE: {\n      list = transactions.filter(\n        (transaction) => transaction.date >= begin && transaction.date <= end\n      );\n\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        stats: generateStatistics(list, action),\n        pendings: list.filter((t) => t.isPending),\n      });\n      break;\n    }\n    case STATISTICS_PER_CATEGORY: {\n      list = transactions.filter((transaction) => {\n        if (category == \"null\" && transaction.category == null) {\n          return true;\n        }\n        return transaction.category === category;\n      });\n\n      const stats = generateStatistics(list, action);\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        graph: generateGraph(stats),\n        stats: generateStatistics(list, action),\n        pendings: list.filter((t) => t.isPending),\n      });\n      break;\n    }\n    case STATISTICS_SEARCH: {\n      list = transactions.filter((transaction) =>\n        fuzzyFilter(action.text || \"\", transaction.name)\n      );\n      postMessage({\n        uuid,\n        type: action.type,\n        transactions: list,\n        stats: generateStatistics(list, action),\n      });\n      break;\n    }\n    case STATISTICS_NOMADLIST: {\n      list = transactions\n        .filter(\n          (transaction) =>\n            categoriesToExclude.indexOf(transaction.category) == -1\n        )\n        .filter((transaction) => !transaction.isPending);\n      const result = generateNomadlistOverview(nomadlist, list);\n      postMessage({\n        uuid,\n        type: action.type,\n        cities: result.cities,\n        countries: result.countries,\n      });\n      break;\n    }\n    default:\n      return;\n  }\n};\n\nfunction generateCurrentYear(transactions, action) {\n  var year = new Date().getFullYear();\n  var month = new Date().getMonth();\n\n  var list = transactions.filter(\n    (transaction) => transaction.date.getFullYear() === year\n  );\n  var result = generateStatistics(list, action);\n\n  var list2 = transactions.filter(\n    (transaction) =>\n      transaction.date.getFullYear() === year &&\n      transaction.date.getMonth() === month\n  );\n  result.currentMonth = generateStatistics(list2, action);\n  return result;\n}\n\nfunction generateTrends(transactions, numberOfDayToAnalyse = 30) {\n  let categories = {};\n  var now = new Date();\n  var date1 =\n    new Date(now.getFullYear(), now.getMonth(), now.getDate()) -\n    1000 * 60 * 60 * 24 * (numberOfDayToAnalyse + 1);\n  var date2 =\n    new Date(now.getFullYear(), now.getMonth(), now.getDate()) -\n    1000 * 60 * 60 * 24;\n\n  var list = transactions.filter(\n    (transaction) =>\n      transaction.date >= date1 &&\n      transaction.date <= date2 &&\n      !transaction.isPending\n  );\n  list.forEach((transaction) => {\n    if (transaction.amount < 0) {\n      if (!transaction.category) {\n        transaction.category = 0;\n      }\n      if (!categories[transaction.category]) {\n        categories[transaction.category] = {\n          earliest: 0,\n          oldiest: 0,\n        };\n      }\n      categories[transaction.category].earliest =\n        categories[transaction.category].earliest + transaction.amount;\n    }\n  });\n\n  // Oldest range\n\n  var date3 =\n    new Date(now.getFullYear(), now.getMonth(), now.getDate()) -\n    1000 * 60 * 60 * 24 * (numberOfDayToAnalyse * 2 + 2);\n  var date4 =\n    new Date(now.getFullYear(), now.getMonth(), now.getDate()) -\n    1000 * 60 * 60 * 24 * (numberOfDayToAnalyse + 2);\n\n  var list2 = transactions.filter(\n    (transaction) =>\n      transaction.date >= date3 &&\n      transaction.date <= date4 &&\n      !transaction.isPending\n  );\n  list2.forEach((transaction) => {\n    if (transaction.amount < 0) {\n      if (!transaction.category) {\n        transaction.category = 0;\n      }\n      if (!categories[transaction.category]) {\n        categories[transaction.category] = {\n          earliest: 0,\n          oldiest: 0,\n        };\n      }\n      categories[transaction.category].oldiest =\n        categories[transaction.category].oldiest + transaction.amount;\n    }\n  });\n\n  let trend = [];\n  let diff = 0;\n  let sumEarlier = 0;\n  let sumOldiest = 0;\n  Object.keys(categories).forEach((key) => {\n    trend.push({\n      id: key,\n      diff: categories[key].oldiest - categories[key].earliest,\n      earliest: categories[key].earliest,\n      oldiest: categories[key].oldiest,\n    });\n    diff = diff + (categories[key].oldiest - categories[key].earliest);\n    sumEarlier += categories[key].earliest;\n    sumOldiest += categories[key].oldiest;\n  });\n  trend = trend.sort((a, b) => {\n    return a.diff < b.diff ? 1 : -1;\n  });\n\n  return {\n    diff,\n    firstRange: {\n      dateBegin: date1,\n      dateEnd: date2,\n      sum: sumEarlier,\n    },\n    secondRange: {\n      dateBegin: date3,\n      dateEnd: date4,\n      sum: sumOldiest,\n    },\n    trend,\n  };\n}\n\nfunction generateStatistics(transactions = [], action = {}) {\n  let expenses = 0,\n    incomes = 0,\n    categories = {},\n    dates = {},\n    hasUnknownAmount = false,\n    beginDate = null,\n    endDate = null;\n\n  transactions.forEach((transaction) => {\n    if (transaction.amount == null || transaction.amount == undefined) {\n      hasUnknownAmount = true;\n    }\n\n    if (!beginDate) {\n      beginDate = transaction.date;\n      endDate = transaction.date;\n    }\n\n    // Calculate categories\n    if (transaction.category && !categories[transaction.category]) {\n      categories[transaction.category] = {\n        expenses: 0,\n        incomes: 0,\n        counter: 0,\n      };\n    }\n    if (transaction.category == null && !categories[\"null\"]) {\n      categories[\"null\"] = {\n        expenses: 0,\n        incomes: 0,\n        counter: 0,\n      };\n    }\n\n    // Keep track of the date Range\n    if (transaction.date < beginDate) {\n      beginDate = transaction.date;\n    } else if (transaction.date > endDate) {\n      endDate = transaction.date;\n    }\n\n    // Calculate per dates\n    if (!dates[transaction.date.getFullYear()]) {\n      dates[transaction.date.getFullYear()] = {\n        expenses: 0,\n        incomes: 0,\n        counter: 0,\n        months: {},\n      };\n    }\n    if (\n      !dates[transaction.date.getFullYear()].months[transaction.date.getMonth()]\n    ) {\n      dates[transaction.date.getFullYear()].months[\n        transaction.date.getMonth()\n      ] = {\n        expenses: 0,\n        incomes: 0,\n        counter: 0,\n        days: {},\n      };\n    }\n    if (\n      !dates[transaction.date.getFullYear()].months[transaction.date.getMonth()]\n        .days[transaction.date.getDate()]\n    ) {\n      dates[transaction.date.getFullYear()].months[\n        transaction.date.getMonth()\n      ].days[transaction.date.getDate()] = {\n        expenses: 0,\n        incomes: 0,\n        counter: 0,\n      };\n    }\n\n    const year_stats = dates[transaction.date.getFullYear()];\n    year_stats.counter += 1;\n    if (!transaction.isPending) {\n      if (transaction.amount >= 0) {\n        incomes += transaction.amount;\n        year_stats.incomes += transaction.amount;\n        year_stats.months[transaction.date.getMonth()].incomes +=\n          transaction.amount;\n        year_stats.months[transaction.date.getMonth()].counter += 1;\n        year_stats.months[transaction.date.getMonth()].days[\n          transaction.date.getDate()\n        ].incomes += transaction.amount;\n        year_stats.months[transaction.date.getMonth()].days[\n          transaction.date.getDate()\n        ].counter += 1;\n        if (transaction.category) {\n          categories[transaction.category].incomes += transaction.amount;\n        } else {\n          categories[\"null\"].incomes += transaction.amount;\n        }\n      } else {\n        expenses += transaction.amount;\n        year_stats.expenses += transaction.amount;\n        year_stats.months[transaction.date.getMonth()].expenses +=\n          transaction.amount;\n        year_stats.months[transaction.date.getMonth()].counter += 1;\n        year_stats.months[transaction.date.getMonth()].days[\n          transaction.date.getDate()\n        ].expenses += transaction.amount;\n        year_stats.months[transaction.date.getMonth()].days[\n          transaction.date.getDate()\n        ].counter += 1;\n        if (transaction.category) {\n          categories[transaction.category].expenses += transaction.amount;\n        } else {\n          categories[\"null\"].expenses += transaction.amount;\n        }\n      }\n    }\n  });\n\n  /* \n    Generate Calendar data. An array for each day.\n  */\n\n  let calendar = [];\n\n  if ((action.begin && action.end) || (beginDate && endDate)) {\n    let i = action.begin || beginDate;\n    let end = action.end || endDate;\n\n    while (i.getTime() <= end.getTime()) {\n      const year = i.getUTCFullYear(),\n        month = i.getUTCMonth(),\n        date = i.getUTCDate();\n      if (dates[year]?.months[month]?.days[date]) {\n        calendar.push({\n          date: new Date(Date.UTC(year, month, date)),\n          amount: dates[year].months[month].days[date].expenses,\n        });\n      } else {\n        calendar.push({\n          date: new Date(Date.UTC(year, month, date)),\n          amount: 0,\n        });\n      }\n\n      i = new Date(i.getTime() + 60 * 60 * 24 * 1000);\n    }\n  }\n\n  // Generate perCategoriesArray with relative pourcentage\n  const perCategoriesArray = Object.keys(categories)\n    .map((id) => {\n      const category = categories[id];\n      return {\n        id: id,\n        incomes: category.incomes,\n        expenses: category.expenses,\n        sum: category.incomes + category.expenses,\n      };\n    })\n    .sort((a, b) => {\n      return a.incomes + a.expenses > b.incomes + b.expenses ? 1 : -1;\n    });\n\n  if (perCategoriesArray?.length) {\n    const minCategory = perCategoriesArray[0].sum;\n    const maxCategory = perCategoriesArray[perCategoriesArray.length - 1].sum;\n\n    perCategoriesArray?.forEach((category) => {\n      if (category.sum < 0) {\n        category.percentage = (category.sum / minCategory) * 100;\n        category.percentageTotal = (category.sum / expenses) * 100;\n      } else if (category.sum > 0) {\n        category.percentage = (category.sum / maxCategory) * 100;\n        category.percentageTotal = (category.sum / incomes) * 100;\n      } else {\n        category.percentage = 0;\n        category.percentageTotal = 0;\n      }\n    });\n  }\n\n  return {\n    beginDate: beginDate,\n    endDate: endDate,\n    incomes: incomes,\n    expenses: expenses,\n    hasUnknownAmount: hasUnknownAmount,\n    calendar: calendar,\n    perDates: dates,\n    perCategories: categories,\n    perCategoriesArray: perCategoriesArray,\n  };\n}\n\nfunction generateGraph(stats) {\n  // Generate Graph data\n  let lineExpenses = {\n    // color: theme.palette.numbers.red,\n    label: \"Expenses\",\n    values: [],\n  };\n\n  let lineIncomes = {\n    // color: theme.palette.numbers.blue,\n    label: \"Incomes\",\n    values: [],\n  };\n\n  Object.keys(stats.perDates).forEach((year) => {\n    // For each month of year\n    Object.keys(stats.perDates[year].months).forEach((month) => {\n      if (stats.perDates[year].months[month]) {\n        lineExpenses.values.push({\n          date: new Date(year, month),\n          value: +stats.perDates[year].months[month].expenses * -1,\n        });\n        lineIncomes.values.push({\n          date: new Date(year, month),\n          value: stats.perDates[year].months[month].incomes,\n        });\n      } else {\n        lineExpenses.values.push({\n          date: new Date(year, month),\n          value: 0,\n        });\n        lineIncomes.values.push({\n          date: new Date(year, month),\n          value: 0,\n        });\n      }\n    });\n  });\n\n  return [lineExpenses, lineIncomes];\n}\n\nfunction generateNomadlistOverview(nomadlist, transactions) {\n  const result = {\n    cities: {},\n    countries: {},\n  };\n  const now = new Date();\n  nomadlist.data.trips.forEach((trip) => {\n    const begin = stringToDate(trip.date_start);\n    const end = stringToDate(trip.date_end);\n\n    if (end <= now) {\n      trip.transactions = transactions.filter(\n        (transaction) => transaction.date >= begin && transaction.date <= end\n      );\n\n      if (trip.transactions.length) {\n        const key = `${trip.place}-${trip.country_code}`;\n        if (!result.cities[key]) {\n          result.cities[key] = {\n            country: trip.country,\n            country_code: trip.country_code,\n            country_slug: trip.country_slug,\n            place: trip.place,\n            place_slug: trip.place_slug,\n            averageStay: 0,\n            averageExpenses: 0,\n            averagePerDay: 0,\n            averagePerMonth: 0,\n            stay: 0,\n            transactions_length: 0,\n            trips: [],\n          };\n        }\n        if (!result.countries[trip.country_code]) {\n          result.countries[trip.country_code] = {\n            country: trip.country,\n            country_code: trip.country_code,\n            country_slug: trip.country_slug,\n            averageStay: 0,\n            averageExpenses: 0,\n            averagePerDay: 0,\n            averagePerMonth: 0,\n            stay: 0,\n            transactions_length: 0,\n            trips: [],\n          };\n        }\n        trip.stats = generateStatistics(trip.transactions);\n        trip.stay = Math.ceil(Math.abs(begin - end) / (1000 * 60 * 60 * 24));\n        if (trip.stay == 0) {\n          trip.stay = 1;\n        }\n        trip.perDay = trip.stats.expenses / trip.stay;\n        trip.perMonth = (trip.stats.expenses * 365.25) / trip.stay / 12;\n        result.cities[key].stay += trip.stay;\n        result.cities[key].transactions_length += trip.transactions.length;\n        result.cities[key].trips.push(trip);\n        result.cities[key].averageStay += trip.stay;\n        result.cities[key].averageExpenses += trip.stats.expenses;\n        result.cities[key].averagePerDay += trip.perDay;\n        result.cities[key].averagePerMonth += trip.perMonth;\n\n        result.countries[trip.country_code].stay += trip.stay;\n        result.countries[trip.country_code].transactions_length +=\n          trip.transactions.length;\n        result.countries[trip.country_code].trips.push(trip);\n        result.countries[trip.country_code].averageStay += trip.stay;\n        result.countries[trip.country_code].averageExpenses +=\n          trip.stats.expenses;\n        result.countries[trip.country_code].averagePerDay += trip.perDay;\n        result.countries[trip.country_code].averagePerMonth += trip.perMonth;\n      }\n    }\n  });\n\n  Object.values(result.cities).forEach((city) => {\n    city.averageStay = city.averageStay / city.trips.length;\n    city.averageExpenses = city.averageExpenses / city.trips.length;\n    city.averagePerDay = city.averagePerDay / city.trips.length;\n    city.averagePerMonth = city.averagePerMonth / city.trips.length;\n  });\n\n  Object.values(result.countries).forEach((country) => {\n    country.averageStay = country.averageStay / country.trips.length;\n    country.averageExpenses = country.averageExpenses / country.trips.length;\n    country.averagePerDay = country.averagePerDay / country.trips.length;\n    country.averagePerMonth = country.averagePerMonth / country.trips.length;\n  });\n\n  return {\n    cities: Object.values(result.cities),\n    countries: Object.values(result.countries),\n  };\n}\n","export const DB_NAME = \"seven23\";\nexport const DB_VERSION = 15; // Cannot rollback after creation\nexport const API_DEFAULT_URL = \"https://api.seven23.io\";\n\nexport const ATTACHMENT_DELETE_REQUEST = \"ATTACHMENT_DELETE_REQUEST\";\nexport const UPDATE_ENCRYPTION = \"UPDATE_ENCRYPTION\";\nexport const ENCRYPTION_KEY_CHANGED = \"ENCRYPTION_KEY_CHANGED\";\nexport const ENCRYPTION_ERROR = \"ENCRYPTION_ERROR\";\nexport const FLUSH = \"FLUSH\";\nexport const RESET = \"RESET\";\n\nexport const DASHBOARD_UPDATE_CONFIG = \"DASHBOARD_UPDATE_CONFIG\";\n\nexport const CATEGORIES_CREATE_REQUEST = \"CATEGORIES_CREATE_REQUEST\";\nexport const CATEGORIES_READ_REQUEST = \"CATEGORIES_READ_REQUEST\";\nexport const CATEGORIES_UPDATE_REQUEST = \"CATEGORIES_UPDATE_REQUEST\";\nexport const CATEGORIES_DELETE_REQUEST = \"CATEGORIES_DELETE_REQUEST\";\nexport const CATEGORIES_RESET = \"CATEGORIES_RESET\";\nexport const CATEGORIES_EXPORT = \"CATEGORIES_EXPORT\";\n\nexport const CHANGES_CREATE_REQUEST = \"CHANGES_CREATE_REQUEST\";\nexport const CHANGES_READ_REQUEST = \"CHANGES_READ_REQUEST\";\nexport const CHANGES_UPDATE_REQUEST = \"CHANGES_UPDATE_REQUEST\";\nexport const CHANGES_DELETE_REQUEST = \"CHANGES_DELETE_REQUEST\";\nexport const CHANGES_EXPORT = \"CHANGES_EXPORT\";\n\nexport const TRANSACTIONS_CREATE_REQUEST = \"TRANSACTIONS_CREATE_REQUEST\";\nexport const TRANSACTIONS_READ_REQUEST = \"TRANSACTIONS_READ_REQUEST\";\nexport const TRANSACTIONS_UPDATE_REQUEST = \"TRANSACTIONS_UPDATE_REQUEST\";\nexport const TRANSACTIONS_DELETE_REQUEST = \"TRANSACTIONS_DELETE_REQUEST\";\nexport const TRANSACTIONS_EXPORT = \"TRANSACTIONS_EXPORT\";\nexport const TRANSACTIONS_SYNC_REQUEST = \"TRANSACTIONS_SYNC_REQUEST\";\nexport const TRANSACTIONS_SWITCH_ID = \"TRANSACTIONS_SWITCH_ID\";\n\nexport const ACCOUNTS_CREATE_REQUEST = \"ACCOUNTS_CREATE_REQUEST\";\nexport const ACCOUNTS_SYNC_REQUEST = \"ACCOUNTS_SYNC_REQUEST\";\nexport const ACCOUNTS_UPDATE_REQUEST = \"ACCOUNTS_UPDATE_REQUEST\";\nexport const ACCOUNTS_DELETE_REQUEST = \"ACCOUNTS_DELETE_REQUEST\";\nexport const ACCOUNTS_CURRENCY_REQUEST = \"ACCOUNTS_CURRENCY_REQUEST\";\nexport const ACCOUNTS_SWITCH_REQUEST = \"ACCOUNTS_SWITCH_REQUEST\";\n\nexport const ACCOUNTS_IMPORT = \"ACCOUNTS_IMPORT\";\n\nexport const CURRENCIES_SYNC_REQUEST = \"CURRENCIES_SYNC_REQUEST\";\nexport const CURRENCIES_CREATE_REQUEST = \"CURRENCIES_CREATE_REQUEST\";\nexport const CURRENCIES_READ_REQUEST = \"CURRENCIES_READ_REQUEST\";\nexport const CURRENCIES_UPDATE_REQUEST = \"CURRENCIES_UPDATE_REQUEST\";\nexport const CURRENCIES_DELETE_REQUEST = \"CURRENCIES_DELETE_REQUEST\";\nexport const CURRENCIES_RESET = \"CURRENCIES_RESET\";\n\nexport const USER_LOGIN = \"LOGIN\";\nexport const USER_LOGOUT = \"LOGOUT\";\nexport const USER_LOGOUT_LOADING = \"USER_LOGOUT_LOADING\";\nexport const USER_FETCH_PROFILE = \"USER_FETCH_PROFILE\";\nexport const USER_CREATE_REQUEST = \"USER_CREATE_REQUEST\";\nexport const USER_READ_REQUEST = \"USER_READ_REQUEST\";\nexport const USER_UPDATE_REQUEST = \"USER_UPDATE_REQUEST\";\nexport const USER_CHANGE_PASSWORD = \"USER_CHANGE_PASSWORD\";\nexport const USER_CHANGE_EMAIL = \"USER_CHANGE_EMAIL\";\n\nexport const USER_FETCH_TOKEN = \"USER_FETCH_TOKEN\";\nexport const USER_REVOKE_TOKEN = \"USER_REVOKE_TOKEN\";\nexport const USER_DELETE_REQUEST = \"USER_DELETE_REQUEST\";\nexport const USER_CHANGE_THEME = \"USER_CHANGE_THEME\";\nexport const USER_UPDATE_NETWORK = \"USER_UPDATE_NETWORK\";\n\nexport const SERVER_CONNECTING = \"SERVER_CONNECTING\";\nexport const SERVER_CONNECT = \"SERVER_CONNECT\";\nexport const SERVER_CONNECT_FAIL = \"SERVER_CONNECT_FAIL\";\nexport const SERVER_SYNC = \"SERVER_SYNC\";\nexport const SERVER_SYNCED = \"SERVER_SYNCED\";\nexport const SERVER_LOAD = \"SERVER_LOAD\";\nexport const SERVER_LOADED = \"SERVER_LOADED\";\nexport const SERVER_LOGGED = \"SERVER_LOGGED\";\nexport const SERVER_LAST_EDITED = \"SERVER_LAST_EDITED\";\nexport const SERVER_INIT = \"SERVER_INIT\";\nexport const SERVER_UNDER_MAINTENANCE = \"SERVER_UNDER_MAINTENANCE\";\nexport const SERVER_ERROR = \"SERVER_ERROR\";\nexport const SERVER_ADD = \"SERVER_ADD\";\nexport const SERVER_REMOVE = \"SERVER_REMOVE\";\n\nexport const STATISTICS_DASHBOARD = \"STATISTICS_DASHBOARD\";\nexport const STATISTICS_VIEWER = \"STATISTICS_VIEWER\";\nexport const STATISTICS_PER_DATE = \"STATISTICS_PER_DATE\";\nexport const STATISTICS_PER_CATEGORY = \"STATISTICS_PER_CATEGORY\";\nexport const STATISTICS_SEARCH = \"STATISTICS_SEARCH\";\nexport const STATISTICS_NOMADLIST = \"STATISTICS_NOMADLIST\";\n\nexport const REPORT_SET_DATES = \"REPORT_SET_DATES\";\nexport const NAVIGATE = \"NAVIGATE\";\nexport const MODAL = \"MODAL\";\nexport const SNACKBAR = \"SNACKBAR\";\nexport const NAV_BAR = \"NAV_BAR\";\nexport const HIDE_NAV_BAR = \"HIDE_NAV_BAR\";\nexport const FLOATING_ADD_BUTTON = \"FLOATING_ADD_BUTTON\";\nexport const SNACKBAR_POP = \"SNACKBAR_POP\";\nexport const APP_LAST_SEEN = \"APP_LAST_SEEN\";\nexport const VISIBILITY = \"VISIBILITY\";\nexport const CACHE_DID_UPDATE = \"CACHE_DID_UPDATE\";\nexport const TOGGLE_DEVELOPER = \"TOGGLE_DEVELOPER\";\n\nexport const CHANGE_EVENT = \"CHANGE_EVENT\";\nexport const ADD_EVENT = \"ADD_EVENT\";\nexport const DELETE_EVENT = \"DELETE_EVENT\";\nexport const UPDATE_EVENT = \"UPDATE_EVENT\";\n","function fuzzyFilter(searchText, key) {\n  var compareString = key.toLowerCase();\n  searchText = searchText.toLowerCase();\n\n  var searchTextIndex = 0;\n  for (var index = 0; index < key.length; index++) {\n    if (compareString[index] === searchText[searchTextIndex]) {\n      searchTextIndex += 1;\n    }\n  }\n\n  return searchTextIndex === searchText.length;\n}\n\nexport { fuzzyFilter };\n"],"names":["o","Symbol","iterator","constructor","prototype","regex","stringToDate","str","test","year","slice","month","day","Date","Error","concat","_typeof","generateCurrentYear","transactions","action","getFullYear","getMonth","result","generateStatistics","filter","transaction","date","list2","currentMonth","generateTrends","numberOfDayToAnalyse","categories","now","date1","getDate","date2","isPending","forEach","amount","category","earliest","oldiest","date3","date4","trend","diff","sumEarlier","sumOldiest","Object","keys","key","push","id","sort","a","b","firstRange","dateBegin","dateEnd","sum","secondRange","expenses","incomes","dates","hasUnknownAmount","beginDate","endDate","undefined","counter","months","days","year_stats","calendar","begin","end","i","getTime","getUTCFullYear","getUTCMonth","getUTCDate","UTC","perCategoriesArray","map","length","minCategory","maxCategory","percentage","percentageTotal","perDates","perCategories","generateGraph","stats","lineExpenses","label","values","lineIncomes","value","onmessage","event","data","uuid","nomadlist","categoriesToExclude","list","type","postMessage","currentYear","trend7","trend30","graph","pendings","t","searchText","compareString","toLowerCase","searchTextIndex","index","fuzzyFilter","text","name","cities","countries","trips","trip","date_start","date_end","place","country_code","country","country_slug","place_slug","averageStay","averageExpenses","averagePerDay","averagePerMonth","stay","transactions_length","Math","ceil","abs","perDay","perMonth","city","generateNomadlistOverview","indexOf"],"sourceRoot":""}